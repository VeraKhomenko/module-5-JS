// Функция конструктор

// const Manager = function () { // эта ф-ция при вызове будет зозвращать обьект ->
const Manager = function (name, sales) {
  //делаем объект динамическим (задаем имя)
  // this.name = 'manager'; // оператор new создает пустой ОБЬЕКТ и F вызывается в контексте этого объекта (this получает ссылку на этот объект)
  this.name = name; // записываем ссылку на имя после =
  this.sales = sales;
};
const mango = new Manager('Mango', 5);
console.log(mango);
const poly = new Manager('Poly', 10);
console.log(poly); // теперь можно сколько угодно создавать обьектов с именем в консоле будет выводится имя

// одинаковый набор св-в , а значения разные - это фун-ция конструктор - с ее помощью мы можем динамически создавать объекты с разными значениями НО одинаковыми св-ми

// св-во Function.prototype

// берем набор методов (функции) и выносим в отдельный объект на который класть ссылку в __proto__
// у каждой ф-ции есть св-во prototype(по умолчанию это объект)  - в котором лежит объект и изначально на этом объекте есть только св-во конструктор в котором лежит ссылка на саму ф-цию(в котором лежит ссылка на саму функцию)
const Manager = function (name, sales) {
  this.name = name;
  this.sales = sales;
};

Manager.prototype.sell = function () {
  // в prototype - можно записать свои мотоды (буквально в объект prototype добавляем св-во sell, которая добавляет какую-то фун-цию)
  this.sales += 1; // у будущих объектов которые будут эту ф-цию вызвать у них будет св-во sales, будем его увеличивать на +1
};
// const mango = new Manager('Mango', 5);
// console.log(mango);
// const poly = new Manager('Poly', 10);
// console.log(poly);
